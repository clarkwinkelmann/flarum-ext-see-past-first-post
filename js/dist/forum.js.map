{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@clarkwinkelmann/see-past-first-post/webpack/bootstrap","webpack://@clarkwinkelmann/see-past-first-post/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/see-past-first-post/webpack/runtime/define property getters","webpack://@clarkwinkelmann/see-past-first-post/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/see-past-first-post/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['forum/components/PostStream']\"","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['forum/states/PostStreamState']\"","webpack://@clarkwinkelmann/see-past-first-post/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['common/Component']\"","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['forum/components/SignUpModal']\"","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@clarkwinkelmann/see-past-first-post/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@clarkwinkelmann/see-past-first-post/./src/forum/components/CantSeePastFirstPost.ts","webpack://@clarkwinkelmann/see-past-first-post/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@clarkwinkelmann/see-past-first-post/./src/forum/components/index.ts","webpack://@clarkwinkelmann/see-past-first-post/./src/forum/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/PostStream'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/PostStreamState'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/SignUpModal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport SignUpModal from 'flarum/forum/components/SignUpModal';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport ItemList from 'flarum/common/utils/ItemList';\n\nconst translationPrefix = 'clarkwinkelmann-see-past-first-post.forum.';\n\nexport default class CantSeePastFirstPost extends Component {\n    view() {\n        if (app.session.user) {\n            return m('.Post.CantSeePastFirstPost', app.translator.trans(translationPrefix + 'cant-see'));\n        }\n\n        return m('.Post.CantSeePastFirstPost', [\n            m('p', app.translator.trans(translationPrefix + 'login-to-see')),\n            m('p', this.links().toArray()),\n        ]);\n    }\n\n    links() {\n        const items = new ItemList();\n\n        items.add('logIn', Button.component({\n            className: 'Button Button--primary',\n            onclick: () => {\n                // Re-use the discussion controls, that way other extensions that replaced the login action\n                // Will also apply here without any additional logic (like the kilowhat/wordpress wordpress-only login)\n                DiscussionControls.replyAction(false, false).catch(() => {\n                    // Ignore rejection since it's rejected when the modal opens\n                });\n            },\n        }, app.translator.trans('core.forum.header.log_in_link')));\n\n        if (app.forum.attribute('allowSignUp')) {\n            items.add('signUp', Button.component({\n                className: 'Button Button--link',\n                onclick: () => app.modal.show(SignUpModal),\n            }, app.translator.trans('core.forum.header.sign_up_link')));\n        }\n\n        return items;\n    }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import CantSeePastFirstPost from './CantSeePastFirstPost';\n\nexport const components = {\n    CantSeePastFirstPost,\n};\n","import {extend, override} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport PostStream from 'flarum/forum/components/PostStream';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport PostStreamState from 'flarum/forum/states/PostStreamState';\nimport CantSeePastFirstPost from './components/CantSeePastFirstPost';\n\nexport * from './components';\n\napp.initializers.add('clarkwinkelmann-see-past-first-post', () => {\n    extend(PostStream.prototype, 'view', function (this: PostStream, vdom: any) {\n        if (this.discussion.attribute('canSeePastFirstPost')) {\n            return;\n        }\n\n        let insertAtIndex = vdom.children.length;\n\n        // We want to insert below the feed, but above the reply box\n        // So do we perform the same check that decides if the reply box is visible, and go one index before if that's the case\n        if (insertAtIndex > 0 && this.stream.viewingEnd() && (!app.session.user || this.discussion.canReply())) {\n            insertAtIndex--;\n        }\n\n        vdom.children.splice(insertAtIndex, 0, CantSeePastFirstPost.component({\n            key: 'see-past-first-post',\n        }));\n    });\n\n    override(PostStreamState.prototype, 'count', function (this: PostStreamState, original: any) {\n        if (this.discussion.attribute('canSeePastFirstPost') || this.discussion.attribute('seePastFirstPostHiddenCount')) {\n            return original();\n        }\n\n        return this.discussion.commentCount();\n    });\n\n    override(PostStreamState.prototype, 'viewingEnd', function (this: PostStreamState, original: any) {\n        // We need to force viewingEnd to be true otherwise when we tweak PostStreamState.prototype.count\n        // the \"load more\" button would appear\n        if (this.discussion.attribute('canSeePastFirstPost')) {\n            return original();\n        }\n\n        return true;\n    });\n\n    extend(DiscussionListItem.prototype, 'view', function (this: DiscussionListItem, vdom: any) {\n        if (!this.attrs.discussion.attribute('seePastFirstPostHiddenCount')) {\n            return;\n        }\n\n        // Sometimes we will get {subtree: retain}, in which case there's nothing to alter\n        if (!Array.isArray(vdom.children)) {\n            return;\n        }\n\n        vdom.children.forEach((content: any) => {\n            if (content.attrs && content.attrs.className.indexOf('DiscussionListItem-content') !== -1) {\n                const countItemIndex = content.children.findIndex((d: any) => d.attrs && d.attrs.className === 'DiscussionListItem-count');\n\n                if (countItemIndex !== -1) {\n                    content.children.splice(countItemIndex, 1);\n                }\n            }\n        });\n    });\n\n    override(DiscussionListItem.prototype, 'showFirstPost', function (this: DiscussionListItem, original: any) {\n        // When the last post is hidden, force the list to show the info about the first post\n        // Otherwise if we show comment count but hide last post, the TerminalPost would still try to show the last post\n        if (this.attrs.discussion.attribute('seePastFirstPostHiddenLastPost')) {\n            return true;\n        }\n\n        return original();\n    });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","translationPrefix","CantSeePastFirstPost","subClass","superClass","create","constructor","view","app","m","this","links","toArray","items","ItemList","add","Button","className","onclick","DiscussionControls","SignUpModal","Component","components","extend","PostStream","vdom","discussion","attribute","insertAtIndex","children","length","stream","viewingEnd","canReply","splice","component","override","PostStreamState","original","commentCount","DiscussionListItem","attrs","Array","isArray","forEach","content","indexOf","countItemIndex","findIndex"],"sourceRoot":""}